/**
 * 给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。

你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。

返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。
*/

/**
 * 示例 1：

输入：[7,1,5,3,6,4]
输出：5
解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
示例 2：

输入：prices = [7,6,4,3,1]
输出：0
解释：在这种情况下, 没有交易完成, 所以最大利润为 0。
*/

/**
 * @param {number[]} prices
 * @return {number}
 */
// 这个题目也是看大佬们的题解，才一步步搞出来的
// 通过动态规划来完成递推公司，题目中存在三个变量
// i 天数 k 交易次数 n 是否持有股票 0 代表未持有 1 代表持有
// 第i天没有持有股票
// 这里有两种情形， 第i-1天也未持有股票 dp[i-1][k][0]
// 或者 第i-1天持有股票，并且在第i天卖出 d[i-1][k][1] + prices[i]
// 所以 dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
// 第i天持有股票
// 同样也存在两种情形
// 第i-1天持有股票 dp[i-1][k][1]
// 或者 第i-1天未持有股票，并且在第i天买入 dp[i-1][k-1][0] - prices[i]
// 所以 dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])

// 初始值问题
// 第0天未持有股票
// dp[0][0] = 0
// 第0天持有股票
// d[0][1] = -price[0]

var maxProfit = function (prices) {
    let n = prices.length;
    let dp = Array.from(new Array(n), () => new Array(2));
    dp[0][0] = 0; //第0天不持有
    dp[0][1] = -prices[0]; //第0天持有
    for (let i = 1; i < n; i++) {
        dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
        dp[i][1] = Math.max(dp[i - 1][1], -prices[i]);
    }
    return dp[n - 1][0];
};